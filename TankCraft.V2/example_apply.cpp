
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  example.bond
//   Output filename: example_apply.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "example_apply.h"
#include "example_reflection.h"

namespace bond
{
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Record.
    //

    template 
    bool Apply(const ::bond::To< ::example::Record>& transform,
               const ::bond::bonded< ::example::Record>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::example::Record& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::example::Record, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::example::Record>& transform,
               const ::bond::bonded< ::example::Record,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::example::Record>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::example::Record& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::example::Record& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::example::Record& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::example::Record>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::example::Record& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::example::Record>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::example::Record>& transform,
               const ::bond::bonded< ::example::Record,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::example::Record>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::example::Record& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::example::Record& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::example::Record>& transform,
               const ::bond::bonded< ::example::Record,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::example::Record>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::example::Record& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::example::Record& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::example::Record,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
} // namespace bond
